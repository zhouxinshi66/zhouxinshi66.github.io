<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>pom常用配置信息</title>
      <link href="2021/04/21/pom%E5%B8%B8%E7%94%A8%E9%85%8D%E7%BD%AE%E4%BF%A1%E6%81%AF/"/>
      <url>2021/04/21/pom%E5%B8%B8%E7%94%A8%E9%85%8D%E7%BD%AE%E4%BF%A1%E6%81%AF/</url>
      
        <content type="html"><![CDATA[<h2 id="设置字符集编码以及编译级别"><a href="#设置字符集编码以及编译级别" class="headerlink" title="设置字符集编码以及编译级别"></a>设置字符集编码以及编译级别</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.build.sourceEncoding</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">maven.compiler.source</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">maven.compiler.source</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">maven.compiler.target</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">maven.compiler.target</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-compiler-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">source</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">source</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">target</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">target</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="扫描mybatis全局的mapper文件"><a href="#扫描mybatis全局的mapper文件" class="headerlink" title="扫描mybatis全局的mapper文件"></a>扫描mybatis全局的mapper文件</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">resources</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">directory</span>&gt;</span>src/main/java<span class="tag">&lt;/<span class="name">directory</span>&gt;</span><span class="comment">&lt;!--所在的目录--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">includes</span>&gt;</span><span class="comment">&lt;!--包括目录下的.properties,.xml 文件都会扫描到--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.properties<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.xml<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">includes</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">filtering</span>&gt;</span>false<span class="tag">&lt;/<span class="name">filtering</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">resources</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="mybatis逆向工程代码自动生成插件"><a href="#mybatis逆向工程代码自动生成插件" class="headerlink" title="mybatis逆向工程代码自动生成插件"></a>mybatis逆向工程代码自动生成插件</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--mybatis 代码自动生成插件--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.generator<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-generator-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.3.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                    <span class="comment">&lt;!--配置文件的位置--&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">configurationFile</span>&gt;</span>GeneratorMapper.xml<span class="tag">&lt;/<span class="name">configurationFile</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">verbose</span>&gt;</span>true<span class="tag">&lt;/<span class="name">verbose</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">overwrite</span>&gt;</span>true<span class="tag">&lt;/<span class="name">overwrite</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Maven </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Maven </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Redis常用命令</title>
      <link href="2021/04/20/Redis%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"/>
      <url>2021/04/20/Redis%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</url>
      
        <content type="html"><![CDATA[<h2 id="Redis基础命令"><a href="#Redis基础命令" class="headerlink" title="Redis基础命令"></a>Redis基础命令</h2><ol><li>查看服务器运行状态：ping</li><li>查看服务器他的统计信息：info [section]，section的值：server , clients ，memory等等</li><li>切换库命令：select index（默认16个库，从0开始）</li><li>启动redis服务：redis-serve.exe xxx.conf &amp;</li><li>关闭redis服务：在redis客户端输入 redis-cli shutdown</li><li>打开redis客户端：redis-cli -h127.0.0.1 -p 6379<h2 id="Redis中key的操作命令"><a href="#Redis中key的操作命令" class="headerlink" title="Redis中key的操作命令"></a>Redis中key的操作命令</h2></li><li>查看当前数据库中key的数目：dbsize</li><li>查看当前数据库中有哪些key：keys *</li><li>清空当前/所有库：flushdb/flushall</li><li>获取redis的所有配置项：config get *</li><li>查找符合条件的key：key */wo?d/wo[or]d</li><li>判断key是否存在：exists key1 key2。存在返回1，不存在返回0，多个key返回存在的数量</li><li>移动key到指定的数据库，移动的key在原库中删除，移动成功返回1，失败为0：move key dbIndex</li><li>查看key的剩余生存时间，以秒为单位，返回-1为永不过期，-2为不存在：ttl key</li><li>设置key的生存时间，超过时间key自动删除，单位是秒，成功返回1，失败为0：expire key seconds</li><li>查看key所存储值的数据类型：type key</li><li>给key改名字，当key和newkey相同，或者newkey不存在时返回一个错误：rename key newkey</li><li>删除存在的key，不存在的将被忽略，返回删除key的数量：del key1 key2</li></ol><h2 id="Redis中五种数据类型结构"><a href="#Redis中五种数据类型结构" class="headerlink" title="Redis中五种数据类型结构"></a><em>Redis中五种数据类型结构</em></h2><h2 id="字符串类型：String"><a href="#字符串类型：String" class="headerlink" title="字符串类型：String"></a>字符串类型：String</h2><p><strong>简介</strong><br> 1.redis中最基本的数据结构，能存储任何类型的数据，甚至是图片，最大512M<br> 2.字符串类型的数据操作总的思想是通过key操作value，key是数据标识，value是我们感兴趣的业务数据</p><p><strong>常用操作命令</strong></p><ol><li>将字符串值 value 设置到 key 中，如果key已存在，后放的值会把前放的值覆盖掉：set key value</li><li>获取 key 中设置的字符串值,key存在，返回key对应的value；key不存在，返回nil:get key</li><li>如果 key 存在，则将 value 追加到 key 原来旧值的末尾, 如果 key 不存在，则将key 设置值为 value,返回值：追加字符串之后的总长度(字符个数):append key value</li><li>返回 key 所储存的字符串值的长度:strlen key</li><li>将 key 中储存的数字值加1，如果 key 不存在，则 key 的值先被初始化为 0 再执行incr操作:incr key</li><li>将 key 中储存的数字值减1，如果 key 不存在，则么 key 的值先被初始化为 0 再执行 decr 操作:decr key</li><li>将 key 所储存的值加上增量值，如果 key 不存在，则 key 的值先被初始化为 0 再执行 INCRBY 命令:incrby key offset</li><li>将 key 所储存的值减去减量值，如果 key 不存在，则 key 的值先被初始化为 0 再执行 DECRBY 命令:decrby key offset</li><li>获取 key 中字符串值从 startIndex 开始到 endIndex 结束的子字符串,包括startIndex和endIndex, 负数表示从字符串的末尾开始，-1 表示最后一个字符:getrange key startindex endindex</li><li>用value覆盖key的存储的值从offset开始,返回值为修改后的字符串的长度：setrange key offsetIndex value</li><li>设置key的值，并将 key 的生存时间设为 seconds (以秒为单位)  ，如果key已经存在，将覆盖旧值。返回值：设置成功，返回OK：setex key seconds value</li><li>setnx 是 set if not exists 的简写，如果key不存在，则 set 值，存在则不设置值。成功返回1：setnx key value</li><li>同时设置一个或多个 key-value 对：mset key1 value1 key2 value2</li><li>获取所有(一个或多个)给定 key 的值返回值：包含所有key的列表，如果key不存在，则返回nil：mget key1 key2</li><li>同时设置一个或多个 key-value 对，如果有一个key是存在的，则设置不成功：msetex key1 value1 key2 value2</li></ol><h2 id="列表：List"><a href="#列表：List" class="headerlink" title="列表：List"></a>列表：List</h2><p><strong>简介</strong></p><ol><li>Redis列表是简单的字符串列表，按照插入顺序排序，左边（头部）、右边（尾部）或者中间都可以添加元素。底层是个链表结构，链表的操作无论是头或者尾效率都极高，但是如果对中间元素进行操作，那效率会大大降低了。</li><li>列表类型的数据操作总的思想是通过key和下标操作value，key是数据标识，下标是数据在列表中的位置，value是我们感兴趣的业务数据</li></ol><p><strong>常用操作命令</strong></p><ol><li>将一个或多个值 value 插入到列表 key 的最左边（表头），各个value值依次插入到表头位置。返回值：插入之后的列表的长度:lpush key value1 value2[value…]</li><li>将一个或多个值 value 插入到列表 key 的最右边（表尾），各个 value 值按依次插入到表尾。返回值：插入之后的列表的长度:rpush key value[value…]</li><li>获取列表 key 中指定下标区间内的元素，下标从0开始，到列表长度-1；下标也可以是负数，表示列表从后往前取，-1表示倒数第一个元素，-2表示倒数第二个元素，以此类推；startIndex和endIndex超出范围不会报错。<br>返回值：获取到的元素列表:lrange key startIndex endIndex</li><li>移除并返回列表key头部第一个元素，即列表左侧的第一个元素。<br>返回值：列表左侧第一个元素的值；列表key不存在，返回nil:lpop key</li><li>移除并返回列表key尾部第一个元素，即列表右侧的第一个元素。<br>返回值：列表右侧第一个元素的值；列表key不存在，返回nil:rpop key</li><li>获取列表 key 中下标为指定 index 的元素，列表元素不删除，只是查询。0 表示列表的第一个元素，1 表示列表的第二个元素；index也可以负数的下标， -1 表示列表的最后一个元素， -2 表示列表的倒数第二个元素，以此类推:lindex key index</li><li>获取列表 key 的长度,返回值：数值，列表的长度；key不存在返回0:llen key</li><li>根据参数 count 的值，移除列表中与参数 value 相等的元素，count &gt;0 ，从列表的左侧向右开始移除；count &lt; 0 从列表的尾部开始移除；count = 0移除表中所有与 value 相等的值,返回值为移除元素的个数：lrem key count value</li><li>截取key的指定下标区间的元素，并且赋值给key。下标从0开始，一直到列表长度-1；下标也可以是负数，表示列表从后往前取，-1表示倒数第一个元素，-2表示倒数第二个元素，以此类推；startIndex和endIndex超出范围不会报错</li><li>将列表 key 下标为 index 的元素的值设置为 value。功能：设置成功返回ok ; key不存在或者index超出范围返回错误信息:lset key index value</li><li>将值 value 插入到列表 key 当中位于值 pivot 之前或之后的位置。key不存在或者pivot不在列表中，不执行任何操作。返回值：命令执行成功，返回新列表的长度。没有找到pivot返回 -1， key不存在返回0:linsert key before/after pivot value</li></ol><h2 id="集合类型：Set"><a href="#集合类型：Set" class="headerlink" title="集合类型：Set"></a>集合类型：Set</h2><p><strong>简介</strong></p><ol><li>Redis的Set是string类型的无序不重复集合</li><li>集合类型的数据操作总的思想是通过key确定集合，key是集合标识，元素没有下标，只有直接操作业务数据和数据的个数</li></ol><p><strong>常用操作命令</strong></p><ol><li>将一个或多个 member 元素加入到集合 key 当中，已经存在于集合的 member 元素将被忽略，不会再加入。返回值：加入到集合的新元素的个数(不包括被忽略的元素)：sadd key member[member…]</li><li>获取集合 key 中的所有成员元素，不存在的key视为空集合。返回值：返回指定集合的所有元素集合，不存在的key，返回空集合:smembers key</li><li>判断 member 元素是否是集合 key 的元素:sismember key member</li><li>获取集合里面的元素个数返回值：数字，key的元素个数。其他情况返回 0:scard key</li><li>移除集合中一个或多个元素，不存在的元素被忽略:srem key member [member…]</li><li>只提供key，随机返回集合中一个元素，元素不删除，依然在集合中；提供了count时，count 正数, 返回包含count个数元素的集合，集合元素各不重复。count是负数，返回一个count绝对值的长度的集合，集合中元素可能会重复多次:srandmember key[count]</li><li>随机从集合中删除一个或count个元素。返回值：被删除的元素，key不存在或空集合返回nil:spop key[count]</li><li>将 member 元素从src集合移动到dest集合，member不存在，smove不执行操作，返回0，如果dest存在member，则仅从src中删除member:smove src dest member</li><li>返回指定集合的差集，以第一个集合为准进行比较，即第一个集合中有但在其它任何集合中都没有的元素组成的集合。返回值：返回第一个集合中有而后边集合中都没有的元素组成的集合，如果第一个集合中的元素在后边集合中都有则返回空集合:sdiff key key [key…]</li><li>返回指定集合的交集，即指定的所有集合中都有的元素组成的集合。<br>返回值：交集元素组成的集合，如果没有则返回空集合:sinter key key [key…]</li><li>返回指定集合的并集，即指定的所有集合元素组成的大集合，如果元素有重复，则保留一个。返回值：返回所有集合元素组成的大集合，如果所有key都不存在，返回空集合:sunion key key [key…]</li></ol><h2 id="哈希类型：Hash"><a href="#哈希类型：Hash" class="headerlink" title="哈希类型：Hash"></a>哈希类型：Hash</h2><p><strong>简介</strong></p><ol><li>Redis的hash 是一个string类型的key和value的映射表，这里的value是一系列的键值对，hash特别适合用于存储对象</li><li>哈希类型的数据操作总的思想是通过key和field操作value，key是数据标识，field是域，value是我们感<br>兴趣的业务数据</li></ol><p><strong>常用命令</strong></p><ol><li>将键值对field-value设置到哈希列表key中，如果key不存在，则新建哈希列表，然后执行赋值，如果key下的field已经存在，则value值覆盖：hset  key  field  value  [field  value …]</li><li>获取哈希表 key 中给定域 field 的值：hget key field</li><li>同时将多个 field-value (域-值)设置到哈希表 key 中，此命令会覆盖已经存在的field，hash表key不存在，创建空的hash表，再执行hmset：hmset key  field value [field value…]</li><li>获取哈希表 key 中一个或多个给定域的值，返回值：返回和field顺序对应的值，如果field不存在，返回nil：hmget key field [field…]</li><li>获取哈希表 key 中所有的域和值，返回值：以列表形式返回hash中域和域的值，key不存在，返回空hash：hgetall key</li><li>删除哈希表 key 中的一个或多个指定域field，不存在field直接忽略：hdel key field [field…]</li><li>获取哈希表 key 中域field的个数：hlen key</li><li>查看哈希表 key 中，给定域 field 是否存在：hexists key field</li><li>查看哈希表 key 中的所有field域列表：hkeys key</li><li>返回哈希表 中所有域的值列表：hvals key </li><li>给哈希表key中的field域增加int，返回值：返回增加之后的field域的值：hincrby key field int</li><li>给哈希表key中的field域增加float：hincrbyfloat key field float</li><li>将哈希表 key 中的域 field 的值设置为 value ，当且仅当域 field 不存在的时候才设置，否则不设置：hsetnx key field value</li></ol><h2 id="有序集合：Zset"><a href="#有序集合：Zset" class="headerlink" title="有序集合：Zset"></a>有序集合：Zset</h2><p><strong>简介</strong></p><ol><li>Redis 有序集合zset和集合set一样也是string类型元素的集合，且不允许重复的成员</li><li>不同的是zset的每个元素都会关联一个分数（分数可以重复），redis通过分数来为集合中的成员进行从小到大的排序。</li></ol><p><strong>常用命令</strong></p><ol><li><p>将一个或多个 member 元素及其 score 值加入到有序集合 key 中，如果member存在集合中，则覆盖原来的值；score可以是整数或浮点数：zadd key score member [score member…]</p></li><li><p>查询有序集合，指定区间的内的元素。集合成员按score值从小到大来排序；startIndex和endIndex都是从0开始表示第一个元素，1表示第二个元素，以此类推； startIndex和endIndex都可以取负数，表示从后往前取，-1表示倒数第一个元素；WITHSCORES选项让score和value一同返回：zrange key startIndex endIndex [WITHSCORES]   </p></li><li><p>获取有序集 key 中，所有 score 值介于 min 和 max 之间（包括min和max）的成员，有序成员是按递增（从小到大）排序；<br>  使用符号”(“ 表示包括min但不包括max；<br>  withscores 显示score和 value；<br>  limit用来限制返回结果的数量和区间，在结果集中从第offset个开始，取count个<br>  语法：zrangebyscore key min max [WITHSCORES ] [LIMIT offset count]</p></li><li><p>删除有序集合 key 中的一个或多个成员，不存在的成员被忽略：zrem key member [member…]</p></li><li><p>获取有序集 key 的元素成员的个数：zcard key</p></li><li><p>返回有序集 key 中， score 值在 min 和 max 之间(包括 score 值等于 min 或 max )的成员的数量：zcount key min max</p></li><li><p>获取有序集 key 中成员 member 的排名，有序集成员按 score 值从小到大顺序排列，从0开始排名，score最小的是0 ：zrank key member</p></li><li><p>获取有序集合key中元素member的分数：zscore key member</p></li><li><p>获取有序集 key 中成员 member 的排名，有序集成员按 score 值从大到小顺序排列，从0开始排名，score最大的是0 ：zrevrank key member</p></li><li><p>查询有序集合，指定区间的内的元素。集合成员按score值从大到小来排序；startIndex和endIndex都是从0开始表示第一个元素，1表示第二个元素，以此类推；startIndex和endIndex都可以取负数，表示从后往前取，-1表示倒数第一个元素；WITHSCORES选项让score和value一同返回：zrevrange<br>key startIndex endIndex [WITHSCORES]</p></li><li><p>获取有序集 key 中，所有 score 值介于 max 和 min 之间（包括max和min）的成员，有序成员是按递减（从大到小）排序；<br> 使用符号”(“ 表示不包括min和max；<br> withscores 显示score和 value；<br> limit用来限制返回结果的数量和区间，在结果集中从第offset个开始，取count个<br> 语法：zrevrangebyscore key max min  [WITHSCORES ] [LIMIT offset count]</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> Redis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>break和return、continue的作用与区别</title>
      <link href="2021/04/20/break%E5%92%8Creturn%E3%80%81continue%E7%9A%84%E4%BD%9C%E7%94%A8%E4%B8%8E%E5%8C%BA%E5%88%AB/"/>
      <url>2021/04/20/break%E5%92%8Creturn%E3%80%81continue%E7%9A%84%E4%BD%9C%E7%94%A8%E4%B8%8E%E5%8C%BA%E5%88%AB/</url>
      
        <content type="html"><![CDATA[<ol><li>break是用来跳出循环的，但不跳出函数，当某循环中出现break，例如for，while，do-while都可以跳出，但不跳出函数并且该循环终止，开始执行循环之后的代码。通常break语句总是与if语句联在一起,即满足条件时便跳出循环</li><li>return语句是将函数的值返回主调函数，后面的不管是循环里面还是循环外面的都不执行。但是它并不是用于专门跳出循环，而是结束一个方法，当在循环体中遇到Return，Return就会结束该方法，则循环随之也就结束。</li><li>continue语句的作用是跳过循环本中剩余的语句而强行执行下一次循环，结束一个循环的本次循环，但继续执行该循环的下一次循环，与break的区别在于break将该循环完全终止。continue语句只用在for、while、do-while等循环体中,常与if条件语句一起使用,用来加速循环</li></ol>]]></content>
      
      
      <categories>
          
          <category> JavaSE </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> JavaSE </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
